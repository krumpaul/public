-- ********************************************************************************** --
-- **                                                                              ** --
-- **   Minecraft AE2 Auto-Stocker by RandomBlue (E.J. Wilburn)                    ** --
-- **   ----------------------------------------------------                       ** --
-- **                                                                              ** --
-- **   This program automatically crafts items necessary to maintain a minimum    ** --
-- **   stock level of specific items.  The items are configured in a file on      ** --
-- **   a computercraft computer named stock_list.txt in the stocker directory.    ** --
-- **   Examine that file for example formatting and details.                      ** --
-- **                                                                              ** --
-- **   Minimum stock levels and crafting batch sizes are configurable per item.   ** --
-- **                                                                              ** --
-- **   The computer must be placed adjacent to a full block ME Interface attached ** --
-- **   to an ME Network where both the items are stored and the crafting CPUs are ** --
-- **   located.  Each item you wish to maintain a stock level for must have       ** --
-- **   autocrafting enabled for it.                                               ** --
-- **                                                                              ** --
-- **   Arguments                                                                  ** --
-- **   ----------------------------------------------------                       ** --
-- **   checkFrequency (optional) - How often inventory levels are checked in      ** --
-- **                               seconds.                                       ** --
-- **   attachSide (optional)     - Side the computer is attached to the           ** --
-- **                               ME Interface (full block version).             ** --
-- **   stockFileName (optional)  - Full path to the file containing stocking      ** --
-- **                               requirements.                                  ** --
-- **                                                                              ** --
-- **  Change Log:                                                                 ** --
-- **    8th Sep 2015:  [v0.1]  Initial Release                                    ** --
-- **    11th Sep 2015: [v0.11] Minor bug fix - attempting to crafting 0 items     ** --
-- **                           when current quantity equals minQuantity           ** --
-- **                                                                              ** --
-- **  TODO:                                                                       ** --
-- **    1) Save command line parameters to startup script.                        ** --
-- **                                                                              ** --
-- ********************************************************************************** --

-- Parameters with default values.
local checkFrequency = 15 -- How often inventory levels are checked in seconds.  Overridden by passing as the first argument.
local attachSide = "bottom" -- Side the computer is attached to the ME Interface (full block version).
                            -- Overridden by passing as the second argument.
local stockFileName = "stocker/stock_list.txt" -- Change this if you want the file somewhere else.  Can be
                                               -- overridden via a parameter.
local recraftDelay = 300 -- Delay, in seconds, before allowing an item to be crafted again.  If them item in question exceeds
                         -- its min quantity before the delay expires, the delay is reset as it's assumed the job
                         -- completed.  300 seconds = 5 minutes
local delayedItems = {} -- List of delayed items by id:variant with delay time in seconds.  Decremented each loop by
                        -- checkFrequency ammount.  When the delay hits 0 or lower then the item is removed from
                        -- the list.

local DEBUG = false

-- Process the input arguments - storing them to global variables
local args = { ... }

function main(args)
	processArgs(args)
	-- Initialize Monitor
	local monitor = peripheral.find("monitor")
	if not monitor then error("Monitor not found.") else
		monitor.setTextScale(0.5)
		monitor.clear()
		monitor.setCursorPos(1, 1)
		monitor.setCursorBlink(false)
		print("Monitor initialized.")
	end
	-- Initialize RS Bridge
	local ae2 = peripheral.find("meBridge")
	if not ae2 then error("ME Bridge not found.") end
	print("ME Bridge initialized.")
	-- load stocks
	local stocks = loadStockFile(stockFileName)
	displayStockingInfo(monitor, stocks)
	-- enableAutoRestart()

	while (true) do
		monitor.print("[" .. getDisplayTime() .. "] Checking inventory.")
		print("[" .. getDisplayTime() .. "] Checking inventory.")
		-- local allItems = getAllItems(ae2)

		-- for i=1, #allItems do
		-- 	if (allItems[i].is_craftable == true) then
		-- 		stockItem(allItems[i], stocks, ae2)
		-- 	end
		craftitems(monitor, stocks, ae2 )
		os.sleep(checkFrequency)
	end
	-- end
end

function processArgs(args)
	if (#args >= 1) then
		assert(type(args[1]) == "number", "The first parameter (checkFrequency) must be a number.")
		checkFrequency = args[1]
	end

	if (#args > 1) then
		assert(type(args[2]) == "string", "The second parameter (attachSide) must be a string.")
		attachSide = args[2]:lower()
	end
	-- assert(isValidSide(attachSide),	"The attachSide parameter must be a valid side: left, right, front, back, top, bottom")

	if (#args > 2) then
		assert(type(args[3]) == "string", "The third parameter (stockFileName) must be a string.")
		stockFileName = args[3]
	end
	assert(fs.exists(stockFileName), "The stock file does not exist: " .. stockFileName)
end

-- function attachToAe2(attachSide)
-- 	-- Make sure the attached device is actually an ME Interface.
-- 	assert(peripheral.getType(attachSide) == "tileinterface", "The computer must be attached to a full block " ..
-- 		"ME Inteface on the specified side.")
-- 	return peripheral.wrap(attachSide)
-- end

function loadStockFile(stockFileName)
	local stockFile = fs.open(stockFileName, "r")
	local stockFileContents = stockFile.readAll();
	stockFile.close();
	local outputStocks = textutils.unserialize(stockFileContents)

	if (DEBUG) then
		print("Stock file: ")
		print(stockFileContents)
		print("Output stocks length: " .. #outputStocks)
		print("Output stocks: ")
		for i=1, #outputStocks do
			print("itemId: " .. outputStocks[i].itemId)
			print("minQuantity: " .. outputStocks[i].minQuantity)
			print("batchSize: " .. outputStocks[i].batchSize)
		end
	end

	assert(#outputStocks > 0, "There are no entries in the " .. stockFileName .. " file.")
	return outputStocks
end

function displayStockingInfo(mon, stocks)
	print("Stocking info:")
	for i=1, #stocks do
		mon.write(" itemId: " .. stocks[i].itemId .. ":" .. " minQuantity: " .. stocks[i].minQuantity ..
		" batchSize: " .. stocks[i].batchSize)
		print(" itemId: " .. stocks[i].itemId .. ":" .. " minQuantity: " .. stocks[i].minQuantity ..
			" batchSize: " .. stocks[i].batchSize)
	end
end
--{
--	{
--		displayName = "Printed Silicon",
--		itemId = "ae2:printed_silicon",
--		variant = 20,
--		minQuantity = 5,
--		batchSize = 1,
--	},
function craftitems(mon, stocks, ae2 )
	for i=1, #stocks do
		mon.write("Checking inventory for" and stocks[i].displayName)
		item = (ae2.getItem({ name = stocks[i].itemId}))
		if item.amount < stocks[i].minQuantity then
			mon.write("Crafting Required for:" and stocks[i].displayName)
			if ( ae2.isItemCraftable(item) and not ae2.isItemCrafting(item) and isCpuAvailable(ae2)  ) then
				mon.write(stocks[i].displayName, "sent for crafting")
				ae2.craftItem(item, stocks[i].batchSize)
			end
		end
	end
end


function isCpuAvailable(ae2)
	local cpus = ae2.getCraftingCPUs()
	for i=1, #cpus do
		if (cpus[i].busy == false) then return true end
	end
	return false
end

function getDisplayTime()
	return textutils.formatTime(os.time(), false)
end

function enableAutoRestart()
	-- Skip this if any startup file already exists.
	-- Let the user manaully delete or edit the startup file at that point.
	-- Notify the user.
	if (fs.exists("startup") == true) then
		print("Startup file already exists.")
		return
	end

	outputFile = fs.open("startup", "w")

	-- Write an info message so that people know how to get out of auto-resume
	outputFile.write("\nprint(\"Running auto-restart...\")\n")
	outputFile.write("print(\"If you want to stop auto-resume and restore original state:\")\n")
	outputFile.write("print(\"1) Hold Ctrl-T until the program terminates\")\n")
	outputFile.write("print(\"2) Type \\\"rm startup\\\" (without quotes) and hit Enter\")\n")
	outputFile.write("print(\"\")\n\n")

	-- Write the code required to restart the turtle
	outputFile.write("shell.run(\"")
	outputFile.write(shell.getRunningProgram())
	outputFile.write("\")\n")
	outputFile.close()
end

-- Start the actual program
main(args)