-- ********************************************************************************** --
-- **                                                                              ** --
-- **   Minecraft AE2 Auto-Stocker idea by (E.J. Wilburn)                          ** --
-- **	rewritten by krumpaul													   ** --
-- **   ----------------------------------------------------                       ** --
-- **                                                                              ** --
-- **   This program automatically crafts items necessary to maintain a minimum    ** --
-- **   stock level of specific items.  The items are configured in a file on      ** --
-- **   a computercraft computer named stock_list.txt in the stocker directory.    ** --
-- **   Examine that file for example formatting and details.                      ** --
-- **                                                                              ** --
-- **   Minimum stock levels and crafting batch sizes are configurable per item.   ** --
-- **                                                                              ** --
-- **   Arguments                                                                  ** --
-- **   ----------------------------------------------------                       ** --
-- **   checkFrequency (optional) - How often inventory levels are checked in      ** --
-- **                               seconds.                                       ** --
-- **   stockFileName (optional)  - Full path to the file containing stocking      ** --
-- **                               requirements.                                  ** --
-- **                                                                              ** --
-- **  Change Log:                                                                 ** --
-- **    8th Sep 2015:  [v0.1]  Initial Release                                    ** --
-- **    11th Sep 2015: [v0.11] Minor bug fix - attempting to crafting 0 items     ** --
-- **                           when current quantity equals minQuantity           ** --
-- **    10th Oct 2022 	[v0.12]	 implemented monitors, stopped tracking entire ae2 ** --
-- **                            inventory,implemented handling 0 inv, add mincpu  ** --
-- **							 added ae2 support								   ** --
-- **                                                                              ** --
-- **                                                                              ** --
-- ********************************************************************************** --

-- Parameters with default values.
local checkFrequency = 15 -- How often inventory levels are checked in seconds.  Overridden by passing as the first argument.
local stockFileName = "stocker/stock_list.txt" -- Change this if you want the file somewhere else.  Can be
local mincpu = 1 --Number of crafting CPU's to keep open for people.
local DEBUG = false

-- Process the input arguments - storing them to global variables
local args = { ... }
function main(args)
	processArgs(args)
	-- Initialize Monitor
	local monitor = peripheral.find("monitor")
	if not monitor then error("Monitor not found.") else
		monitor.setTextScale(0.5)
		monitor.clear()
		monitor.setCursorPos(1, 1)
		monitor.setCursorBlink(false)
		print("Monitor initialized.")
	end
	-- Initialize RS Bridge
	local ae2 = peripheral.find("meBridge")
	if not ae2 then error("ME Bridge not found.") end
	print("ME Bridge initialized.")
	-- load stocks
	local stocks = loadStockFile(monitor, stockFileName)
	while (true) do
		print("[" .. getDisplayTime() .. "] Checking inventory.")
		craftitems(monitor, stocks, ae2 )
		
		os.sleep(checkFrequency)
	end
end

function mPrintRowJustified(mon, y, pos, text, ...)
    w, h = mon.getSize()
    fg = mon.getTextColor()
    bg = mon.getBackgroundColor()

    if pos == "left" then x = 1 end
    if pos == "center" then x = math.floor((w - #text) / 2) end
    if pos == "right" then x = w - #text end

    if #arg > 0 then mon.setTextColor(arg[1]) end
    if #arg > 1 then mon.setBackgroundColor(arg[2]) end
    mon.setCursorPos(x, y)
    mon.write(text)
    mon.setTextColor(fg)
    mon.setBackgroundColor(bg)
end

function processArgs(args)
	if (#args >= 1) then
		assert(type(args[1]) == "number", "The first parameter (checkFrequency) must be a number.")
		checkFrequency = args[1]
	end

	if (#args > 2) then
		assert(type(args[3]) == "string", "The third parameter (stockFileName) must be a string.")
		stockFileName = args[3]
	end
	assert(fs.exists(stockFileName), "The stock file does not exist: " .. stockFileName)
end

function loadStockFile(mon, stockFileName, ...)
	local stockFile = fs.open(stockFileName, "r")
	local stockFileContents = stockFile.readAll();
	stockFile.close();
	local outputStocks = textutils.unserialize(stockFileContents)
	row = 3
	header_shown = 0
	for e in pairs(outputStocks) do
		item = outputStocks[e]
		if header_shown == 0 then
			mPrintRowJustified(mon, row, "left", "REQUESTS")
			header_shown = 1
			row = row + 1
		end
		text = string.format("%s %s %d",item.displayName ,":", item.minQuantity)
		mPrintRowJustified(mon, row, "left", text, colors.blue, ...)
		row = row + 1
	end

	assert(#outputStocks > 0, "There are no entries in the " .. stockFileName .. " file.")
	return outputStocks
end

function craftitems(mon, stocks, ae2, ... )
	row = 1
	header_shown = 0
	if header_shown == 0 then
		if row > 1 then row = row + 1 end
		mPrintRowJustified(mon, row, "right", "STOCK LEVELS")
		header_shown = 1
		row = row + 1
	end

	for i=1, #stocks do
		color = colors.green
		print("Checking inventory for", stocks[i].displayName)
		item = (ae2.getItem({ name = stocks[i].itemId}))
		if (item == nil or item == '') then 
			item = {name = stocks[i].itemId, amount = 0}
		end
		if item.amount < stocks[i].minQuantity then
			color = colors.red
			print("Crafting Required for:", stocks[i].displayName)
			craftingstatus = ae2.isItemCrafting(item)
			if craftingstatus then color = colors.orange end
			if ( ae2.isItemCraftable(item) and not craftingstatus and isCpuAvailable(mon, ae2)  ) then
				print(stocks[i].batchSize, stocks[i].displayName, "sent for crafting")
				color = colors.orange
				ae2.craftItem({name = item.name, count = stocks[i].batchSize})
			end

		end
		text = string.format("%s %s %d %s %d", stocks[i].displayName, "Req:", stocks[i].minQuantity, "Stock:", item.amount) -- Stone Req: 5000 Stock: 5001
		mPrintRowJustified(mon, row, "right", text, color)
		row = row + 1
	end
end

function isCpuAvailable(mon, ae2, ...)
	local cpus = ae2.getCraftingCPUs()
	countcpu = 0
	busycpu=0
	local rowp = 1
	color = colors.blue
	local textcpu = "test"
	for i=1, #cpus do
		countcpu = countcpu + 1
		if (cpus[i].isBusy == true) then
			busycpu = busycpu + 1 
		end
		avaliablecpu = countcpu - busycpu
		if (avaliablecpu > mincpu) then
			color = colors.green
			textcpu = string.format("%s %d %s %d %s %d", "CPUs:", avaliablecpu, "/", countcpu, "reserved:", mincpu) -- 3 / 5 leave: 2 CPU
			mPrintRowJustified(mon, rowp, "left", textcpu, color)
			return true
		end
	end
	color = colors.red
	textcpu = string.format("%s %d %s %d %s %d", "CPUs:", avaliablecpu, "/", countcpu, "reserved:", mincpu) -- 3 / 5 leave: 2 CPU
	mPrintRowJustified(mon, rowp, "left", textcpu, color)
	return false
end

function getDisplayTime()
	return textutils.formatTime(os.time(), false)
end

function enableAutoRestart()
	-- Skip this if any startup file already exists.
	-- Let the user manaully delete or edit the startup file at that point.
	-- Notify the user.
	if (fs.exists("startup") == true) then
		print("Startup file already exists.")
		return
	end

	outputFile = fs.open("startup", "w")

	-- Write an info message so that people know how to get out of auto-resume
	outputFile.write("\nprint(\"Running auto-restart...\")\n")
	outputFile.write("print(\"If you want to stop auto-resume and restore original state:\")\n")
	outputFile.write("print(\"1) Hold Ctrl-T until the program terminates\")\n")
	outputFile.write("print(\"2) Type \\\"rm startup\\\" (without quotes) and hit Enter\")\n")
	outputFile.write("print(\"\")\n\n")

	-- Write the code required to restart the turtle
	outputFile.write("shell.run(\"")
	outputFile.write(shell.getRunningProgram())
	outputFile.write("\")\n")
	outputFile.close()
end

-- Start the actual program
main(args)